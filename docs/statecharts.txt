ПРАВИЛА

в одном statechart'е может быть любое количество state'ов и statechart'ов

вложенные statechart'ы на одном уровне являются параллельными, при этом
    состояния, расположенные на одном уровне со вложенными statechart'ами не параллельны вложенным statechart'ам

переходы могут быть настроеные как между state'ами, так и statechart'ами в любой комбинации

пре необходимости сделать переход из параллельных state'ов (в statechart'ах на одном уровне)
    указывается один из state'ов и в условиях указываются остальные state'ы

в один statechart может входить любое количество подсистем

состояния задаются исходя из логики statechart'а, а не жестко привязаны к данным и процессам внутри подсистем

несмотря на похожесть состояний внутри подсистем (order.state, tx.state, ...)
    сами statechart'ты не обязаны использовать эти состояния

подсистемы экспортируют:
 - имя подсистемы
 - контекст
 - API (одно или несколько)
    - REST
    - Messaging

работа подсистем не может использовать состояние statechart'а (они обычно и не знают о существовании SC)

statechart сервер может быть как совмещён с подсистемами в монолите, так и жить отдельно (dedicated statechart - DSC)

DSC общается с подсистемами через pluggable систему коммуникаций - REST/amqp

Embedded statechart (ESC) может общаться с подсистемами как через прямые вызовы методов объектов, так и через сообщения

Общение подсистем с ESC происходит исключительно через сообщения

Обработка ошибок в процессе activities/on_enter/on_exit происходит через сообщения

Создание данных/объектов внутри подсистем не связано с работой statechart'ов

Структура контекста SC жестко задана при конфигурации SC

Каждая подсистема может заполнять свою часть контекста

Общий подход: в SC задается и используется только то, что нужно для работы SC

Данные между подсистемами передаются либо через прямую связь между подсистемами либо через контекст SC

SC и подсистемы должны быть логически изолированы друг от друга

Подсистемы не должны предполагать, кто будет являться получателем сообщений

SC не важно, насколько успешно были выполнены activities (до момента прихода error events)

За маршрутизацию сообщений отвечает messaging medium. Маршрутизация нужна, например:
 - выбор SC при отправке сообщений из подсистем (так как сервер SC может одновременно обрабатывать любое количество SC)
 - выбор подсистемы при отправке сообщений из SC в подсистему
 - пересылка сообщений из одной SC в другую/другие SC

Маршрутизация сообщений между SC происходит отдельно (это не в зоне ответственности SC)






типы описания statechart'ов:

1. hardcoded
2. database
3. scxml file

* регистрация statechart'ов на сервере
    - по uri
    - по инстансу


методы хранения контекста:

1. in-memory
2. database
3. structured in db



server.register_statechart(
    '<statechart_unique_server_id>',
    'hardcode://mixmorph.hardcode_sc.HardcodeSC',
    'memory://'
)

server.register_statechart(
    '<statechart_unique_server_id>',
    'hardcode://mixmorph.hardcode_sc.HardcodeSC',
    'postgres://user:pwd@host/db_name/'
)


